#
#
#	supremIV input specification file
#  format is:
#  type  parameter = default value  units = "unit string"
#	message = "error message"
#	error = condition for parameter legality;
#
#  type can be one of : card integer boolean float string
#  
#  hierarchy is expressed by using the brackets {}
#
#*************************************************************************
#*									 *
#*     Copyright c 1984 The board of trustees of the Leland Stanford 	 *
#*                      Junior University. All rights reserved.		 *
#*     This subroutine may not be used outside of the SUPREM4 computer	 *
#*     program without the prior written consent of Stanford University. *
#*									 *
#*     Copyright c 1991 The board of regents of the University of 	 *
#*                      Florida.  All rights reserved.			 *
#*     This subroutine may not be used outside of the SUPREM4 computer	 *
#*     program without the prior written consent of the University of 	 *
#*     Florida.								 *
#*									 *
#*									 *
#*************************************************************************/
#   suprem.key                Version 2.1
#   Last Modification : 2/3/93 14:28:25

#card 0
#card for output of comments
card echo;	#this card prints its parameter line

#card 1
#card used for interactive online help - it uses the param line as a help string
card man;


#card 2
#initialize the mesh, wafer and background concentration
card initialize;
{
    string infile units = "structure file for read";

    float conc  units = "background concentration"
    message = "concentrations must be positive"
    error = (conc < 0.0);

    #identifiers for the different impurities
    switch impurity = 1 units = "background doping type"
    message = "Only one impurity";
    {
	boolean arsenic;
	boolean phosphorus;
	boolean boron;
	boolean gallium;
	boolean antimony;
	boolean gold;
	boolean beryllium;
	boolean magnesium;
	boolean selenium;
	boolean isilicon;
	boolean tin;
	boolean germanium;
	boolean zinc;
	boolean carbon;
	boolean generic;
    }


    #substrate orientation - notice 101 will get past this check.
    #However because of a parser bug, we can't use
    #error = (orient!=100) && (orient!=110) && (orient!=111)

    integer orient = 100
    units = "Substrate crystal orientation, default 100"
    message = "invalid orientation specified"
    error = (orient < 100) || (orient > 111);

    integer p.ori = 110
    units = "Orientation of mask edges. Don't change this."
    message = "invalid orientation specified"
    error = (p.ori < 100) || (p.ori > 111);

    boolean line.data = f units = "list locations of mesh lines?";
    float interval.r = 1.5 units = "maximum interval ratio"
    message = "Interval ratio must be > 1 and should be < 2"
    error = (interval.r <= 1.0);

    #scale factor for incoming iggi meshes
    float scale = 1.0 units="scale factor for incoming meshes";
    
    #flip the y coordinates over (used with iggi)
    boolean flip.y = false units="invert the mesh";

    boolean forest = false units="input a forest file";
}


#card 3
#this card is for the logging of cpu data
card cpulog;
{
    #turn the logging on or off
    boolean log = true units="cpu usage logging on/off";
    
    #file name for the cpu info to be logged to
    string cpufile units="file for cpu data"
	message = "cpufile can only be specified when logging is on"
	error   = ! log;
}



#card 4
#this card sets up the axes, scaling and shape for a two dimensional plot
card plot.2d;
{
    #the first four must remain at the front and in this order
    #run time checks against the size of the device require it
    #parameters for the device area to be plotted
    float x.min = -1000.0	units="minimum x value for plots";
    float x.max =  1000.0	units="maximum x value for plots";
    float y.min = -1000.0	units="minimum y value for plots";
    float y.max =  1000.0	units="maximum y value for plots";

    switch newwin = 1 units="how?"
    message = "use zoom.in, zoom.out OR pan";
    {
	boolean normal;
	boolean zoom.in;
	boolean zoom.out;
	boolean pan;
    }
    

    #line type to do this plot in
    integer line.grid = 1 units="line type for grid lines";
    integer line.bound = 2 units="line type for boundary lines";

    boolean vornoi = false units="plot vornoi triangles";
    boolean diamonds = false units="plot diamonds";
   
    boolean stress = false;
    boolean flow = false;
    float   vmax  = 0;
    float   vleng = 0;
    int     line.com  = 3;
    int     line.ten  = 4;

    #plot the material and device bounds??
    boolean boundary units="material boundary";

    #plot the grid for the device
    boolean grid units="draw the grid";

    #clear the plot before start?
    boolean clear = true units="clear the screen";

    #plot tic marks along the edge of the device?
    boolean axis = true units="draw an axis";

    #fill the device to fit the screen limits?
    boolean fill = false units="fill the screen with plot";
}


#card 5
#this card has configuration options, like terminal setup included
card option;
{
    #allow specification of terminal type
    string terminal units="terminal type";

    string plot.file units="where output is to go if not the terminal";
    string file.save units="file to copy plot to";
    boolean stop.save units="quit saving and close save file";
    boolean on.save   units="restart saving after a pause";
    boolean off.save  units="turn off saving for a while";

    switch verbose = 2 units="the amount of output"
    message = "Contradictory print levels";
    {
	boolean quiet;
	boolean normal;
	boolean chat;
	boolean barf;
    }
	
}


#card 6
#this card has the options for the setup of the numerical analysis
card method;
{
    #a switch for the impurity type
    switch impurity = 1 units="which impurity does this apply to";
    {
	boolean vacancies;
	boolean interstitial;
	boolean arsenic;
	boolean phosphorus;
	boolean antimony;
	boolean boron;
	boolean gallium;
	boolean oxidant;
	boolean velocity;
	boolean traps;
	boolean gold;
	boolean psi;
	boolean cesium;
	boolean electron;
	boolean holes;
	boolean circuit;
	boolean beryllium;
	boolean magnesium;
	boolean selenium;
	boolean isilicon;
	boolean tin;
	boolean germanium;
	boolean zinc;
	boolean carbon;
	boolean generic;
    }

    #allow for a minimum degree reorder
    boolean min.fill = true units = "minimum degree reorder";
    float min.freq = 1.25 units = "relative increase in l length before redoing";

    switch blkmeth = 1
    units="iteration method for the entire system"
    message = "Only one block method may be specified";
    {
	boolean gauss;
	boolean cg;
    }

    #how many back vectors to use if iccg or auto?
    integer back = 1 units = "number of back vectors"
    message = "Back vectors have to between 1 and 6"
    error = ((back < 1) || (back > 6));

    #initial size of the timestep
    float init.time = 0.1 units = "seconds";

    #factorization frequency
    switch factor = 1 units="how often should we compute the LU decomposition";
    {
	boolean time units="when the time step dictates it";
	boolean err units="when the error reduction indicates";
	boolean newton units="every newton iteration";
    }

    #factorization frequency
    switch precondition = 1 units="what is the preconditioner?";
    {
	boolean diag units="diagonal blocks";
	boolean knot units="knot blocks - not available";
	boolean full.fac units="full LU decomposition of everything";
    }


    #how do we integrate diffusion
    boolean trbdf;
    string formula units="a formula giving dt as f(t)";
    
    switch defectm=1 units="how to handle defects";
    {
	#use the concentration dependent model, no surface effects
	boolean fermi units="defects are a function of fermi level only";
	#do a full two dimensional continuity equation solution
	boolean two.dim units="full 2D numerical solution";
	#do a steady state approximation
	boolean steady units="full 2d steady state solution";
	#do a steady state approximation
	boolean full.cpl units="full 2d with completer defect dopant pairing";
    }

    switch oxidem=1;
    {
	#use the analytic oxide model
	boolean erfc;

	#or one of the others...
	boolean erf1;
	boolean erf2;
	boolean erfg;

	#compute the oxidant concentration and assume vertical growth
	boolean vertical;

	#assume the oxide is compressible
	boolean compress;

	#assume the oxide is viscous
	boolean viscous;
    }

    #oxide grid spacing defaults to 0.1
    float grid.oxide = 0.1 units="oxide spacing to use in the field region, in microns";

    #oxide recalculation parameter
    float redo.oxide = 10 units="percent change concentration before redoing flow";
    float oxide.gdt = 0.25 units="maximum time step relative to grid change" error = (oxide.gdt <= 0);
    float oxide.rel = 1.0e-6 units="relative error bound for velocities";
    float oxide.early = 0.5 units="earliest node can be removed";
    float oxide.late  = 0.9 units="latest node can be removed";
    float ox.obfix    = 2 units="cos-squared of worst angle before hacking";
    float gloop.imax  = 170 units="worst intrusion angle, degrees";
    float gloop.emin  = 130 units="tolerable extrusion angle, degrees";
    float gloop.emax  = 170 units="worst extrusion angle, degrees";

    float grid.grain = 0.1 units="oxide spacing to use in the field region, in microns";
    float grain.gdt = 0.25 units="maximum time step relative to grid change" error = (oxide.gdt <= 0);


    #whether to use empirical normals
    int norm.style = 0 units="0=true normal / 1=boosted normal";

    #a parameter to control how much gets printed
    boolean verbose = true;

    #the error bounds
    float rel.error = 1.0e-3 units="relative error bound";
    float abs.error = 1.0e10 units="absolute error bound";

    #skip silicon in stress computation?
    boolean skip.sil = t;

    #max iterations in block loop
    integer blk.itlim = 10 units = "Max iterations on blocks";
}

#card 7
#this card allows time temperature steps to be enacted
card diffuse;
{
    #allow temperature to be specified
    float temp units = "degrees Kelvin"
    message = "Temperatures must be greater than absolute zero"
    error = temp < 0.0;

    #and how long will we be in the furnace for...
    float time units = "minutes"
    message = "Negative time!  Why are you simulating anything?"
    error = time <= 0.0;

    #ramp variables
    boolean ramp
    message = "start and stop temperature must be specified"
    error = !start && !stop;
    float start units = "start temperature";
    float stop units = "stop temperature";

    #what noxious gases are floating around
    switch ambient = 5
    units="Ambient gas type"
    message = "Only one ambient may be specified";
    {
	boolean dryo2 = false;
	boolean weto2 = false;
	boolean nitrogen = false;	
	boolean ammonia = false; #!not a capability, just looks good here
	boolean argon = false;
	boolean antimony;
	boolean arsenic;
	boolean boron;
	boolean gallium;
	boolean phosphorus;
	boolean beryllium;
	boolean magnesium;
	boolean selenium;
	boolean isilicon;
	boolean tin;
	boolean germanium;
	boolean zinc;
	boolean carbon;
	boolean generic;
	boolean speedie;
    }

    #until we can have more than 1 active gas, this will have to do
    float pressure = 1.0
	units = "partial pressure of active gas species (atm)"
	message = "pressure must be positive"
	error = pressure <= 0.0;

    #impurity concentration in the gas stream
    boolean solid.sol = false;
    float gas.conc = 1e13 units="gas concentration for predep";

    boolean adapt = false;

    #value to specify the continuation of a previous diffusion
    boolean continue;

    #a parameter to specify frequency of file writes
    int dump units="save structure every dump time steps";

    #parameter for the initial gold surface concentration
    float gold.surf;

    #commands to be executed at the end of a timestep
    string movie units="string to be executed at all time steps";
}


#card 8
#this card allows the implantation of impurities into the substrate
card implant;
{
    #the dosage implanted
    float dose units = "per centimeter squared"
    message = "dose must be positive"
    error   = dose < 0.0;

    float energy units = "Kev"
    message = "energy must be positive"
    error = energy < 0.0;

    #identifiers for the different impurities
    switch impurity = true
    message = "Only one impurity per implant";
    {
	boolean silicon;
	boolean arsenic;
	boolean phosphorus;
	boolean boron;
	boolean gallium;
	boolean antimony;
	boolean bf2;
	boolean cesium;
	boolean beryllium;
	boolean magnesium;
	boolean selenium;
	boolean isilicon;
	boolean tin;
	boolean germanium;
	boolean zinc;
	boolean carbon;
	boolean generic;
    }

    #adapt grid during implantation?
    boolean adapt = false units="Adapt grid";

    #calculate damage???
    switch second = 1
    units="secondary implant distributions"
    message = "only one of damage or plus.one may be specified";
    {
	boolean damage;
	boolean plus.one;
    }

    #specify mask edges.
    string mask units="mask edge location in pairs enclosed in parenthesis";

    #maximum damage to the crystal
    float max.damage = 1.0e22 units="Maximum damage";

    switch model = 1
    units="distribution function"
    message = "only one of gauss or pearson may be specified";
    {
	boolean gauss;
	boolean pearson;
    }

    #let the user overrule the table
    float range units="Projected range in microns"
    message="Range has to be positive"
    error=range < 0;
    float std.dev units="Standard Deviation";
    float gamma;
    float kurtosis;

    float angle=0.0 units="Angle from vertical";

    #commands to be executed at the end of an adapt step
    string movie units="string to be executed at all grid adaptation steps";
}


#card 9
#this card allows the user to select a variable for postprocessing
card select;
{
    #a vector expression string
    string z units="vector expression";

    #the plot title
    string title units="plot title";

    #the z axis label
    string label units="z axis label";

    #the temperrature of the select calculation
    float temp units = "degrees Kelvin"
    message = "Explain how you cooled the structure below absolute zero?"
    error = temp < 0.0;
}

#card 10
#this card draws contours on for the variable chosen with the select card.
card contour;
{
    #line type to do this plot in
    integer line.type = 1 units="line type to draw in";

    #value for the contour to be drawn
    float value units="value of isoconcentration line";

    #draw point markers
    integer symb units="symbol to put on line (0 == no symbol)";

    boolean print;
    boolean label;
}

#card 11
#this card enables the user to setup and perform a 1 dimensional plot
card plot.1d;
{
    #plot the material and device bounds?(vertical lines for all bound crosses)
    boolean boundary units="draw material boundaries that are crossed";

    #clear the plot before start?
    boolean clear = true units="clear the plot";

    #plot an axis?
    boolean axis = true units="draw axes";

    #draw point markers
    integer symb units="place symbols on the data line";

    #color for the plot
    integer line.type = 1;

    #specify the value at which to plot a cross section
    switch direction = true 
    message = "only x or y may be specified but not both";
    {
	float x.value units="draw a vertical line at this x";
	float y.value units="draw a horizontal line at this y";
    }

    #allow the user to specify xlimits in microns
    float x.min units = "minimum value on the horizontal plot axis";
    float x.max units = "maximum value on the horizontal plot axis";

    #allow the user to specify ylimits, in the units of the selected variable
    float y.min units = "minimum value on the vertical plot axis";
    float y.max units = "minimum value on the vertical plot axis";

    switch mat1 = 1 message = "use mat1 /mat2";
    {
	boolean notselected;
	boolean reflect; boolean backside; boolean exposed;
	boolean gas; boolean oxide; boolean nitride; boolean silicon;
        boolean poly; boolean oxynitride; boolean aluminum; boolean photoresist;
	boolean gaas;
    }
    switch mat2 = 1 message = "use mat1 /mat2";
    {
	boolean /notselected;
	boolean /reflect; boolean /backside; boolean /exposed;
	boolean /gas; boolean /oxide; boolean /nitride; boolean /silicon;
        boolean /poly; boolean /oxynitride; boolean /aluminum; boolean /photoresist;
	boolean /gaas;
    }
    integer /code units = "boundaries that are none of the above";

    boolean arclength = f units="use arclength for interface x coordinate";
}

#card 12
card print.1d;
{
    #specify the value at which to plot a cross section
    switch direction = true 
    message = "only x or y may be specified but not both";
    {
	float x.value units="draw a vertical line at this x";
	float y.value units="draw a horizontal line at this y";
    }

    #print a supremIII layer description
    boolean layers units="integrate data and compile region thicknesses";

    #allow the user to specify xlimits in microns
    float x.min units = "minimum value on the horizontal plot axis";
    float x.max units = "minimum value on the horizontal plot axis";

    switch mat1 = 1 message = "use mat1 /mat2";
    {
	boolean reflect; boolean backside; boolean exposed;
	boolean oxide; boolean nitride; boolean silicon;
        boolean poly; boolean oxynitride; boolean aluminum; boolean photoresist;
    }
    switch mat2 = 1 message = "use mat1 /mat2";
    {
	boolean /reflect; boolean /backside; boolean /exposed;
	boolean /oxide; boolean /nitride; boolean /silicon;
        boolean /poly; boolean /oxynitride; boolean /aluminum; boolean /photoresist;
    }

    string format units = "format for data values, default %-16e";

    boolean arclength = f units="use arclength for interface x coordinate";
}

#card 13
#this card allows the parameters for vacancy diffusion to be changed
#when these change - make sure diffuse_init code changes as well as command
card vacancy;
{
    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean aluminum;
	boolean photoresist;
	boolean gas;
	boolean gaas;
    }

    #specify the diffusion coefficient 
    float D.0 = 1e-9 units = "cm2 / sec diffusion preexponential"
    message = "The diffusion coefficient must be non negative"
    error = (D.0 < 0.0);
    float D.E = 0.0 units = "eV - diffusion activation energy";

    #specify the bulk recombination rate
    float Kr.0 = 2.5e-17 units = "cm3 / sec preexponential for I-V recombination"
    message = "The diffusion coefficient must be non negative"
    error = (Kr.0 < 0.0);
    float Kr.E = 0.0 units = "eV - activation energy for I-V recombination";

    #specify the normal background concentration
    float Cstar.0 = 1e13 units = "cm-3 equilibrium concentration preexponential"
    message = "The equilibrium concentration has to be positive"
    error = (Cstar.0 <= 0.0);
    float Cstar.E = 0.0 units = "eV - activation of equilibrium concentration";

    #data for damage values
    float glob.alpha = 0.0 units = "sec-1 - efficiency of global
damage"
    message = "Efficiency must be positive or zero"
    error = (glob.alpha < 0.0);
    float local.alpha = 0.0 units = "sec-1 - efficiency of local
damage"
    message = "Efficiency must be positive or zero"
    error = (local.alpha < 0.0);
    float dam.center = 0.0 units = "cm - location of localized damage";
    float dam.width = 0.0 units = "cm - width of region containing
localized damage";

    #data for the interstitial trap lifetimes
    float ktrap.0 units = "cm3 / sec preexponential for trap constant"
    message = "The trap coefficient must be non negative"
    error = (ktrap.0 < 0.0);
    float ktrap.E = 0.0 units = "eV - activation energy for trap lifetime";

    #material type
    switch impurity = 1
    message = "only one impurity may be specified";
    {
	boolean boron;
	boolean gallium;
	boolean antimony;
	boolean arsenic;
	boolean phosphorus;
	boolean beryllium;
	boolean magnesium;
	boolean selenium;
	boolean isilicon;
	boolean tin;
	boolean germanium;
	boolean zinc;
	boolean carbon;
	boolean generic;
    }

    #if an impurity is specified, these are the equilibrium coupling coefficients,
    #if not they are the relative charge states concentrations
    float neu.0  = 1.0;
    float neg.0 = 0.0;
    float dneg.0 = 0.0;
    float tneg.0 = 0.0;
    float pos.0 = 0.0;
    float dpos.0 = 0.0;
    float tpos.0 = 0.0;

    #and the activation energy's
    float neu.E  = 1.0;
    float neg.E = 0.0;
    float dneg.E = 0.0;
    float tneg.E = 0.0;
    float pos.E = 0.0;
    float dpos.E = 0.0;
    float tpos.E = 0.0;

    #work on interface properties - neighbor material first
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #model choices for interface kinetics
    boolean time.inj;
    boolean growth.inj;
    boolean recomb;
    boolean segregation;

    #specify the surface recombination parameters 
    float Ksurf.0 = 5.0e-6 units = "surface recombination velocity in cm/sec";
    float Ksurf.E = 0.0 units = "surface recombination velocity activation";
    float Krat.0 = 0.0 units = "surface recombination velocity in cm/sec";
    float Krat.E = 0.0 units = "surface recombination velocity activation";
    float Kpow.0 = 0.0 units = "power dependence of Ksurf on growth rate";
    float Kpow.E = 0.0 units = "power dependence of Ksurf on growth rate";

    #the growth injection parameters
    float vmole = 5.0e22 units = "the atomic concentration of material being consumed";
    float theta.0 = 0.1 units = "fraction of atoms consumed injected preexponential";
    float theta.E = 0.0 units = "fraction of atoms consumed injected activation";
    float Gpow.0 = 1.0 units = "power dependence of injection";
    float Gpow.E = 0.0 units = "power dependence of injection";

    #the time dependent model injection parameters
    float A.0 = 1.0e10 units = "the preexponential injection constant";
    float A.E = 0.0 units = "the activation injection constant";
    float t0.0 = 1.0 units = "preexponential time constant of injection";
    float t0.E = 0.0 units = "activation time constant of injection";
    float Tpow.0 = 1.0 units = "preexponential power dependence";
    float Tpow.E = 0.0 units = "activation power dependence";

    #allow formulas for the injection and recombination
    string rec.str units="formula for surface recombination";
    string inj.str units="formula for surface injection";

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    float Trn.E = 0.0 units = "Activation energy for transport";

}


#card 14
#this card allows the parameters for interstitial diffusion to be changed
card interstitial;
{
    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean aluminum;
	boolean photoresist;
	boolean gas;
	boolean gaas;
    }

    #specify the diffusion coefficient 
    float D.0 = 1e-9 units = "cm2 / sec diffusion preexponential"
    message = "The diffusion coefficient must be non negative"
    error = (D.0 < 0.0);
    float D.E = 0.0 units = "eV - diffusion activation energy";

    #specify the bulk recombination rate
    float Kr.0 = 2.5e-17 units = "cm3 / sec preexponential for I-V recombination"
    message = "The diffusion coefficient must be non negative"
    error = (Kr.0 < 0.0);
    float Kr.E = 0.0 units = "eV - activation energy for I-V recombination";

    #specify the normal background concentration
    float Cstar.0 = 1e13 units = "cm-3 equilibrium concentration preexponential"
    message = "The equilibrium concentration has to be positive"
    error = (Cstar.0 <= 0.0);
    float Cstar.E = 0.0 units = "eV - activation of equilibrium concentration";

    #data for damage values
    float glob.alpha = 0.0 units = "sec-1 - efficiency of global
damage"
    message = "Efficiency must be positive or zero"
    error = (glob.alpha < 0.0);
    float local.alpha = 0.0 units = "sec-1 - efficiency of local
damage"
    message = "Efficiency must be positive or zero"
    error = (local.alpha < 0.0);
    float dam.center = 0.0 units = "cm - location of localized damage";
    float dam.width = 0.0 units = "cm - width of region containing
localized damage";

    #data for the interstitial trap lifetimes
    float ktrap.0 units = "cm3 / sec preexponential for trap constant"
    message = "The trap coefficient must be non negative"
    error = (ktrap.0 < 0.0);
    float ktrap.E = 0.0 units = "eV - activation energy for trap lifetime";

    #impurity type
    switch impurity = 1
    message = "only one impurity may be specified";
    {
	boolean boron;
	boolean gallium;
	boolean antimony;
	boolean arsenic;
	boolean phosphorus;
	boolean beryllium;
	boolean magnesium;
	boolean selenium;
	boolean isilicon;
	boolean tin;
	boolean germanium;
	boolean zinc;
	boolean carbon;
	boolean generic;
    }

    #if an impurity is specified, these are the equilibrium coupling coefficients,
    #if not they are the relative charge states concentrations
    float neu.0  = 1.0;
    float neg.0 = 0.0;
    float dneg.0 = 0.0;
    float tneg.0 = 0.0;
    float pos.0 = 0.0;
    float dpos.0 = 0.0;
    float tpos.0 = 0.0;

    #activation energy
    float neu.E  = 1.0;
    float neg.E = 0.0;
    float dneg.E = 0.0;
    float tneg.E = 0.0;
    float pos.E = 0.0;
    float dpos.E = 0.0;
    float tpos.E = 0.0;

    #work on interface properties - neighbor material first
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #model choices for interface kinetics
    boolean time.inj;
    boolean growth.inj;
    boolean recomb;
    boolean segregation;

    #specify the surface recombination parameters 
    float Ksurf.0 = 5.0e-6 units = "surface recombination velocity in cm/sec";
    float Ksurf.E = 0.0 units = "surface recombination velocity activation";
    float Krat.0 = 0.0 units = "surface recombination velocity in cm/sec";
    float Krat.E = 0.0 units = "surface recombination velocity activation";
    float Kpow.0 = 0.0 units = "power dependence of Ksurf on growth rate";
    float Kpow.E = 0.0 units = "power dependence of Ksurf on growth rate";

    #the growth injection parameters
    float vmole = 5.0e22 units = "the atomic concentration of material being consumed";
    float theta.0 = 0.1 units = "fraction of atoms consumed injected preexponential";
    float theta.E = 0.0 units = "fraction of atoms consumed injected activation";
    float Gpow.0 = 1.0 units = "power dependence of injection";
    float Gpow.E = 0.0 units = "power dependence of injection";

    #the time dependent model injection parameters
    float A.0 = 1.0e10 units = "the preexponential injection constant";
    float A.E = 0.0 units = "the activation injection constant";
    float t0.0 = 1.0 units = "preexponential time constant of injection";
    float t0.E = 0.0 units = "activation time constant of injection";
    float Tpow.0 = 1.0 units = "preexponential power dependence";
    float Tpow.E = 0.0 units = "activation power dependence";

    #allow formulas for the injection and recombination
    string rec.str units="formula for surface recombination";
    string inj.str units="formula for surface injection";

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    float Trn.E = 0.0 units = "Activation energy for transport";

}



#card 15
#this card allows definitions of the antimony constants
#when these change - make sure diffuse_init code changes as well as command
card antimony;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    float Dix.0 = 0.214 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 3.65 units = "Activation energy for Vo diffusivity - eV";

    float Dim.0 = 15.0 units = "Pre-exponential constant for V- cm2/sec"
    message = "Negative values for Dim.0 will screw up the program"
    error = Dim.0 < 0.0;

    float Dim.E = 4.08 units = "Activation energy for V- diffusivity - eV";

    #fractional interstitialcy component
    float Fi = 0.05 units = "Fractional Interstitialcy component"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 16
#this card allows definitions of the arsenic constants
#when these change - make sure diffuse_init code changes as well as command
card arsenic;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.214 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 3.65 units = "Activation energy for Vo diffusivity - eV";

    #singly negative vacancy numbers
    float Dim.0 = 15.0 units = "Pre-exponential constant for V- cm2/sec"
    message = "Negative values for Dim.0 will screw up the program"
    error = Dim.0 < 0.0;

    float Dim.E = 4.08 units = "Activation energy for V- diffusivity - eV";

    #fractional interstitialcy component
    float Fi = 0.05 units = "Fractional Interstitialcy component"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #clustering coefficients
    float Ctn.0 = -102.205 units = "log of pre exponential clustering coeff";
    float Ctn.E = 0.33 units = "Activation energy of clustering";

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}



#card 17
#this card allows definitions of the boron constants
#when these change - make sure diffuse_init code changes as well as command
card boron;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.037 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 3.46 units = "Activation energy for Vo diffusivity - eV";

    #singly negative vacancy numbers
    float Dip.0 = 0.72 units = "Pre-exponential constant for V+ cm2/sec"
    message = "Negative values for Dip.0 will screw up the program"
    error = Dip.0 < 0.0;

    float Dip.E = 3.46 units = "Activation energy for V+ diffusivity - eV";

    float Fi = 0.9 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}



#card 18
#this card sets up oxidation coefficients
card oxide;
{
    integer orient = 100
    units = "relevant orientation for the coefficient specified (111/110/100)"
    message = "invalid orientation specified"
    error = (orient < 100) || (orient > 111);

    #whether the coefficient mentioned is for dry or wet oxidation.
    boolean dry = false;
    boolean wet = false;

    #material type
    switch material = 2
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation/surface coefficients
    switch mater = 1
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    # the linear, parabolic and thin oxide coefficients
    float l.break units = "B/A breakpoint - degrees Celsius";

    float lin.l.0 units = "B/A prefactor at low T - microns/minute";
    float lin.l.e units = "B/A energy    at low T - eV";
    float lin.h.0 units = "B/A prefactor at highT - microns/minute";
    float lin.h.e units = "B/A energy    at highT - eV";

    float p.break units = "B   breakpoint - degrees Celsius";

    float par.l.0 units = "B   prefactor at low T - microns/minute";
    float par.l.e units = "B   energy    at low T - eV";
    float par.h.0 units = "B   prefactor at highT - microns/minute";
    float par.h.e units = "B   energy    at highT - eV";

    float thinox.0 units = "thin oxide coeff prefactor - microns/minute";
    float thinox.e units = "thin oxide coeff energy    - eV";
    float thinox.l units = "thin oxide coeff decay length - microns";

    #atmospheric stuff
    float l.pdep units = "pressure power law dependence of B/A";
    float p.pdep units = "pressure power law dependence of B";
    float hcl.pc units = "% of hcl in the ambient";
    string hclT units = "list of columns (temperatures) in hcl model";
    string hclP units = "list of rows    (hcl %'s) in hcl model";
    string hcl.par units = "row major array of parabolic dependences";
    string hcl.lin units = "row major array of linear dependences";

    #fermi level dependence
    boolean baf.dep units="B/A dependent on Fermi level?";
    float baf.ebk units="B/A(Ef): dimensionless ratio of d(Eg/dT / k)";
    float baf.pe  units="B/A(Ef):        positive vacancy activation energy(Ev)";
    float baf.ppe units="B/A(Ef): double positive vacancy activation energy(Ev)";
    float baf.ne  units="B/A(Ef):        negative vacancy activation energy(Ev)";
    float baf.nne units="B/A(Ef): double negative vacancy activation energy(Ev)";
    float baf.k0  units="B/A(Ef): enhancement ratio prefactor";
    float baf.ke  units="B/A(Ef): enhancement ratio activation energy(Ev)";

    #volume expansion coefficient
    float alpha units = "ratio of atomic volume in material 1 to material 2";

    #Henry's Law coefficient
    float henry.coef units = "solubility of oxidant in oxide (/cm3/atm)"
	message = "Henry's coefficient must be positive"
	error = henry.coeff < 0;

    #number of oxygen atoms in cm3 of oxide
    float theta units = "conc of O atoms incorporated in material (/cm3)"
	message = "the concentration of O must be positive"
	error = theta < 0;


    #for people who have a good feel for oxidant diffusion and segregation
    #coefficients
    float diff.0 units = "Oxidant diffusivity prefactor (cm2/s)";
    float diff.e units = "Oxidant diffusivity activation energy (eV)";

    float seg.0 units = "segregation prefactor (cm2/s)"
	message = "segregation coefficients must be positive"
	error = seg.0 <= 0;
    float seg.E units = "segregation energy (eV)";
    float trn.0 units = "interface transfer prefactor (cm2/s)"
	message = "negative transfer coefficients will cause instability"
	error = trn.0 < 0;
    float trn.E units = "interface transfer energy (eV)";

    boolean stress.dep = false units = "Stress dependent coefficients?";
    boolean ori.dep    = true  units = "Use local orientation?";
    float   ori.fac    = 1.0   units = "B/A relative to 111";
    float Vc units = "Volume coefficient of viscosity reduction (cubic angstroms)";
    float Vr units = "Volume coefficient of B/A reduction (cubic angstroms)";
    float Vd units = "Volume coefficient of B   reduction (cubic angstroms)";
    float Dlim units = "Maximum D increase, default 1";
    float Vt units = "Volume coefficient of B/A reduction (cubic angstroms)";
    float gamma units = "surface tension coefficient";

    #bogus 1d stuff
    float initial = 0.002 units = "initial oxide thickness (not 0!) - mu";
    float spread = 1.0 units = "ratio of lateral to vertical spread";
    float mask.edge = -200 units = "oxide is to the right of mask.edge - mu";

    float nit.thick  units = "nitride thickness - mu";
    float erf.q      units = "q parameter for erf2 model - mu";
    float erf.delta  units = "delta paramter for erf2 model - mu";
    string erf.lbb   units = "Lbb model";
    string erf.h     units = "erf.h model";
}

#card 19
#this card allows definitions of the boron constants
#when these change - make sure diffuse_init code changes as well as command
card phosphorus;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral interstitial numbers
    float Dix.0 = 3.85 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;
    float Dix.E = 3.66 units = "Activation energy for Vo diffusivity - eV";

    #singly negative interstitial numbers
    float Dim.0 = 4.44 units = "Pre-exponential constant for V- cm2/sec"
    message = "Negative values for Dim.0 will screw up the program"
    error = Dim.0 < 0.0;
    float Dim.E = 4.00 units = "Activation energy for V- diffusivity - eV";

    #doubly negative interstitial numbers
    float Dimm.0 = 4.44 units = "Pre-exponential constant for V- cm2/sec"
    message = "Negative values for Dimm.0 will screw up the program"
    error = Dimm.0 < 0.0;
    float Dimm.E = 4.00 units = "Activation energy for V- diffusivity - eV";

    #neutral vacancies numbers
    float Dvx.0 = 3.85 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dvx.0 will screw up the program"
    error = Dvx.0 < 0.0;
    float Dvx.E = 3.66 units = "Activation energy for Vo diffusivity - eV";

    #singly negative vacancy numbers
    float Dvm.0 = 4.44 units = "Pre-exponential constant for V- cm2/sec"
    message = "Negative values for Dvm.0 will screw up the program"
    error = Dvm.0 < 0.0;
    float Dvm.E = 4.00 units = "Activation energy for V- diffusivity - eV";

    #doubly negative vacancy numbers
    float Dvmm.0 = 4.44 units = "Pre-exponential constant for V- cm2/sec"
    message = "Negative values for Dvmm.0 will screw up the program"
    error = Dvmm.0 < 0.0;
    float Dvmm.E = 4.00 units = "Activation energy for V- diffusivity - eV";

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}

#card 20
#this card allows the user to specify rectangular mesh regions
card region;
{
    string xlo units="tag name";
    string xhi units="tag name";
    string ylo units="tag name";
    string yhi units="tag name";

    switch mater = 1 units="region material type";
    {
        boolean silicon=f;
        boolean oxide=f;
	boolean oxynitride=f;
        boolean nitride=f;
        boolean poly=f;
	boolean photoresist=f;
	boolean aluminum=f;
	boolean gaas=f;
    }

}

#card 21
#this card allows the user to specify rectangular mesh boundaries
card boundary;
{
    string xlo units="tag name";
    string xhi units="tag name";
    string ylo units="tag name";
    string yhi units="tag name";

    switch type = 1 units="type of boundary condition";
    {
        boolean reflecting=f;
        boolean exposed=f;
        boolean backside=f;
    }

    integer code = -999;
}

#card 22
#specify rectangular mesh lines
card line;
{
    switch direction = 1;
    {
	boolean x.direction=f;
	boolean y.direction=f;
	boolean z.direction=f;
    }

    float  location = 0.0;
    float  spacing = -999.0;

    string tag units="a name to call this line"; 	

}

#card 23
#card for read/write of mesh and solution values
card structure;
{
    #we can read a mesh in at any time
    string infile units="filename of old mesh";

    #output file name for the mesh
    string outfile units="filename for storage";

    #file name for pisces mesh...
    string pisces units="filename for pisces output";
    boolean show=f units="plot the electrodes";
    float backside.y = 0.0 units = "y-location of backside contact";

    #HDFVset frame
    string frame units="frame name for HDFVset file";
		
    #scale factor for incoming iggi meshes
    float scale = 1.0;
    
    #flip the y coordinates over (used with iggi)
    boolean flip.y = false units="invert the mesh";

    #reflect the grid?
    boolean mirror = f units="reflect the grid about an edge";
    {
	switch rlswitch = 1
	message = "one at a time please";
	{
	    boolean right;
	    boolean left;
	}
	switch tbswitch = 1
	message = "one at a time please";
	{
	    boolean top;
	    boolean bottom;
	}
    }

    boolean forest = false units="output a forest file";

    #change material?
    int region = -1;
    switch mat = 1 message = "one at a time, please";
    {
	boolean reflect; boolean backside; boolean exposed;
	boolean oxide; boolean nitride; boolean silicon;
        boolean poly; boolean oxynitride; boolean aluminum; boolean photoresist;
    }

    #file name for Imagetool output
    string imagetool units="filename for Imagetool output";
    float x.min = -10000.0  units = "minimum x value for plots";
    float x.max =  10000.0  units = "maximum x value for plots";
    float y.min = -10000.0  units = "minimum y value for plots";
    float y.max =  10000.0  units = "maximum y value for plots";
    float z.min = -10000.0  units = "minimum z value for plotx";
    float z.max =  10000.0  units = "maximum z value for plots";
    int pixelx = 400 units = "number of pixels in x-direction";
    int pixely = 200 units = "number of pixels in y-direction";
    int nxfac = 1 units = "interpolation factor in x-direction";
    int nyfac = 1 units = "interpolation factor in y-direction";
    int mode = 0 units = "special z-axis scaling mode";
    boolean mac = f units="output for a Macintosh-II";
    boolean clear = f units="clear counter";
    boolean count = f units="increment counter";
    
    #file name for SIMPL-2 output
    string simpl units="filename for SIMPL-2 output";
    string header units="header file for SIMPL-2";


}


#card 24
#card for depositing a new top layer
card deposit;
{
    switch material = 2
    units="material to be deposited"
    message = "one & only one material must be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean photoresist;
	boolean aluminum;
	boolean gaas;
    }

    switch impurity = 1
    units="impurity type of doping in material, if any"
    message = "one & only one impurity must be specified";
    {
	boolean none;
	boolean arsenic;
	boolean antimony;
	boolean boron;
	boolean gallium;
	boolean phosphorus;
	boolean beryllium;
	boolean magnesium;
	boolean selenium;
	boolean isilicon;
	boolean tin;
	boolean germanium;
	boolean zinc;
	boolean carbon;
	boolean generic;
    }

    float concentration = 1.0e10 units="concentration of doping"
    message = "concentration must be positive"
    error = conc < 0.0;

    float thick = -999.0 units="thickness of the new layer"
    message = "deposited material must have positive thickness"
    error = thick <= 0;

    integer divisions = 1 units="number of grid lines in this material"
    message = "number of division must be > 0"
    error = divisions <= 0;

    #the minimum spacing between points on the new surface line
    float space units="space between grid on outer edge of new material";

    #square up the sides??
    boolean square;
    
    #temperature of deposition
    float temperature = 0.0 units="temperature of deposition"
    message = "temperature has to be positive"
    error = temperature < 0.0;

    #time of deposition
    float pressure = 0.0 units="pressure of deposition"
    message = "pressure has to be positive"
    error = pressure < 0.0;

    #time of deposition
    float time = 0.0 units="time of deposition"
    message = "time has to be positive"
    error = time < 0.0;

    #string file
    string file units="filename of string to deposit";
}

#card 25
#card for etching the top layer
card etch;
{
    switch material = 3
    units="material to etch"
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean photoresist;
	boolean aluminum;
	boolean gaas;
    }

    float  spacing = -999.0;

    #type of etch input
    switch type_etch = 1 
    message = "can not mix etch types";
    {
	boolean speedie;
	#this etch does either left or right of a line
	boolean left units="etch left of the p1,p2 line";
	boolean right units="etch right of the p1,p2 line";

	#the remainders set up an etch of a region
	boolean start units="first of a series of coordinates";
	boolean continue units="one of many of a series of coordinates";
	boolean done units="last of a series of coordinates";

	#etch straight down from the surface
	boolean dry units="straight down form the top"; 
	{
	    float thick units="how far down from top";
	}

	#etch straight down from the surface
	boolean physical units="give a rate constant and time";
	{
	    float r.silicon = 0.0 units="etch rate for silicon";
	    float r.oxide = 0.0 units="etch rate for oxide";
	    float r.oxynitride = 0.0 units="etch rate for oxynitride";
	    float r.nitride = 0.0 units="etch rate for nitride";
	    float r.poly = 0.0 units="etch rate for polysilicon";
	    float r.photoresist = 0.0 units="etch rate for photoresist";
	    float r.aluminum = 0.0 units="etch rate for aluminum";
	    float time units="etch time";
	}

	#boolean for whole region removal
	boolean all units="etch an entire material"
	message = "Have to specify a material to etch"
	error = !silicon && !oxide && !oxynitride && !nitride && !poly && !aluminum && !photoresist;
    }

    #coordinates for the region etches
    float x units="x value of a set of coords";
    float y units="y value of a set of coords";

    #coordinates for the left and right etches
    float p1.x = 0 units="x value in half a line";
    float p1.y = 0 units="y value in half a line";
    float p2.x = 0 units="x value in half a line";
    float p2.y = 0 units="y value in half a line";

    #string file
    string file units="filename of string to etch";
}


#card 26
#this card allows definitions of the gold constants
#when these change - make sure diffuse_init code changes as well as command
card gold;
{
    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #pre-exponential constant
    float K.0 = 0.037 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for K.0 will screw up the program"
    error = K.0 < 0.0;

    float K.E = 3.46 units = "Activation energy for Vo diffusivity - eV";

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

}

#card 27
card stress;
{
	float temp1 units = "Degrees Celsius";
	float temp2 units = "Degrees Celsius";
	integer nel units = "nodes/element (6 or 7)";
	string ubc3; string ubc4; string ubc5; string ubc6; string ubc7; string ubc8; string ubc9;
	string vbc3; string vbc4; string vbc5; string vbc6; string vbc7; string vbc8; string vbc9;

}


#card 28
#This card gets the relative permittivity and intrinsic concentration 
#set up for all the materials
card material;
{
    switch which = 1
    message = "one & only one material must be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean photoresist;
	boolean aluminum;
	boolean gaas;
    }

    switch w2 = 1
    message = "if oxide, one of wet/dry should be specified for viscosity";
    {
        boolean wet;
        boolean dry;
    }

    # material density in grams/cm3.
    float density units = "Material density in grams/cm3.";

    #Ni parameters
    float Ni.0 = 3.9e16 units="Pre exponential of Ni";
    float Ni.E = 0.605  units="Activation Energy of Ni";
    float Ni.Pow = 1.5  units="Power of the temperature";

    #eps
    float eps = 13.1    units="relative permittivity";

    #mechanical properties
    float visc.0 units = "Viscosity prefactor g/(cm*s)";
    float visc.E units = "Viscosity energy (electron volts)";
    float visc.x units = "Artificial compressibility factor: 0-0.49999";
    float Young.m units = "Young's modulus(dynes/cm2)";
    float Poiss.r units = "Poisson's ratio";

    #thermal expansion, intrinsic stress
    string lcte units = "linear coefficient of thermal expansion, /K";
    float intrin.sig units= "intrinsic stress, dynes/cm2";

    #GaAs activation model parameters
    switch type = 1
    message = "only one type may be specified";
    {
	boolean p.type;
	boolean n.type;
    }
    string act.a units = "GaAs activation model parameter a";
    string act.b units = "GaAs activation model parameter b";
}


#card 29
card cesium;
{
    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #diffusivity is single activated
    float D.0 = 0.037 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = D.0 < 0.0;

    float D.E = 3.46 units = "Activation energy for Vo diffusivity - eV";

    boolean mobile = true units = "Mobile species?";

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    float g.0 = 1.0 units = "Pre-exponential constant for detrapping cm/s"
    message = "g.0 must be greater than or equal to 0.0"
    error = g.0 < 0.0;
    
    float g.E = 0.0 units = "Activation energy for detrapping";

}


#card 30
#it's nice to have one of these around
card pause;

#card 31
#some of the trap constants
card trap;
{
    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean aluminum;
	boolean photoresist;
	boolean gaas;
    }

    boolean enable;

    float total units="total trap concentration";

    float frac.0 units="fraction at equilibrium filled";
    float frac.E units="fraction at equilibrium filled";
}
	
#card 32
#card for output of comments
card printf;	#this card prints its parameter line

#card 33
#read a 1d file and add it in
card profile;
{
    #identifiers for the different impurities
    switch impurity = 1 units = "background doping type"
    message = "Only one impurity";
    {
	boolean arsenic;
	boolean phosphorus;
	boolean boron;
	boolean gallium;
	boolean antimony;
	boolean interstitial;
	boolean vacancy;
	boolean beryllium;
	boolean magnesium;
	boolean selenium;
	boolean isilicon;
	boolean tin;
	boolean germanium;
	boolean zinc;
	boolean carbon;
	boolean generic;
    }

    string infile;

    float offset units="the amount of displacement added to the data";
}

#card 34
card mode;
{
    switch operation = 2 units="One/Two Dimensional Mode";
    {
	boolean one.dim;
	boolean two.dim;
	boolean three.dim;
    }
}


#card 35
card device;
{
    #do an initial solution
    boolean init;

    boolean electron units="solve for electrons";
    float qfn units="fixed electron quasifermi level";

    boolean holes units="solve for holes";
    float qfp units="fixed hole quasifermi level";

    float width;
    
    string movie;
}


#card 36
#this card allows definitions of the beryllium constants
#when these change - make sure diffuse_init code changes as well as command
card beryllium;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly negative vacancy numbers
    float Dip.0 = 0.0 units = "Pre-exponential constant for V+ cm2/sec"
    message = "Negative values for Dip.0 will screw up the program"
    error = Dip.0 < 0.0;

    float Dip.E = 0.0 units = "Activation energy for V+ diffusivity - eV";

    #doubly negative vacancy numbers
    float Dipp.0 = 0.0 units = "Pre-exponential constant for V++ cm2/sec"
    message = "Negative values for Dipp.0 will screw up the program"
    error = Dipp.0 < 0.0;

    float Dipp.E = 0.0 units = "Activation energy for V++ diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 37
#this card allows definitions of the carbon constants
#when these change - make sure diffuse_init code changes as well as command
card carbon;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly negative vacancy numbers
    float Dip.0 = 0.0 units = "Pre-exponential constant for V+ cm2/sec"
    message = "Negative values for Dip.0 will screw up the program"
    error = Dip.0 < 0.0;

    float Dip.E = 0.0 units = "Activation energy for V+ diffusivity - eV";

    #doubly negative vacancy numbers
    float Dipp.0 = 0.0 units = "Pre-exponential constant for V++ cm2/sec"
    message = "Negative values for Dipp.0 will screw up the program"
    error = Dipp.0 < 0.0;

    float Dipp.E = 0.0 units = "Activation energy for V++ diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 38
#this card allows definitions of the germanium constants
#when these change - make sure diffuse_init code changes as well as command
card germanium;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Positive values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly positive vacancy numbers
    float Dim.0 = 0.0 units = "Pre-exponential constant for V- cm2/sec"
    message = "Positive values for Dim.0 will screw up the program"
    error = Dim.0 < 0.0;

    float Dim.E = 0.0 units = "Activation energy for V- diffusivity - eV";

    #doubly positive vacancy numbers
    float Dimm.0 = 0.0 units = "Pre-exponential constant for V-- cm2/sec"
    message = "Positive values for Dimm.0 will screw up the program"
    error = Dimm.0 < 0.0;

    float Dimm.E = 0.0 units = "Activation energy for V-- diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 39
#this card allows definitions of the magnesium constants
#when these change - make sure diffuse_init code changes as well as command
card magnesium;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly negative vacancy numbers
    float Dip.0 = 0.0 units = "Pre-exponential constant for V+ cm2/sec"
    message = "Negative values for Dip.0 will screw up the program"
    error = Dip.0 < 0.0;

    float Dip.E = 0.0 units = "Activation energy for V+ diffusivity - eV";

    #doubly negative vacancy numbers
    float Dipp.0 = 0.0 units = "Pre-exponential constant for V++ cm2/sec"
    message = "Negative values for Dipp.0 will screw up the program"
    error = Dipp.0 < 0.0;

    float Dipp.E = 0.0 units = "Activation energy for V++ diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 40
#this card allows definitions of the selenium constants
#when these change - make sure diffuse_init code changes as well as command
card selenium;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Positive values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly positive vacancy numbers
    float Dim.0 = 0.0 units = "Pre-exponential constant for V- cm2/sec"
    message = "Positive values for Dim.0 will screw up the program"
    error = Dim.0 < 0.0;

    float Dim.E = 0.0 units = "Activation energy for V- diffusivity - eV";

    #doubly positive vacancy numbers
    float Dimm.0 = 0.0 units = "Pre-exponential constant for V-- cm2/sec"
    message = "Positive values for Dimm.0 will screw up the program"
    error = Dimm.0 < 0.0;

    float Dimm.E = 0.0 units = "Activation energy for V-- diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 41
#this card allows definitions of the silicon constants
#when these change - make sure diffuse_init code changes as well as command
card isilicon;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Positive values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly positive vacancy numbers
    float Dim.0 = 0.0 units = "Pre-exponential constant for V- cm2/sec"
    message = "Positive values for Dim.0 will screw up the program"
    error = Dim.0 < 0.0;

    float Dim.E = 0.0 units = "Activation energy for V- diffusivity - eV";

    #doubly positive vacancy numbers
    float Dimm.0 = 0.0 units = "Pre-exponential constant for V-- cm2/sec"
    message = "Positive values for Dimm.0 will screw up the program"
    error = Dimm.0 < 0.0;

    float Dimm.E = 0.0 units = "Activation energy for V-- diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 42
#this card allows definitions of the tin constants
#when these change - make sure diffuse_init code changes as well as command
card tin;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Positive values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly positive vacancy numbers
    float Dim.0 = 0.0 units = "Pre-exponential constant for V- cm2/sec"
    message = "Positive values for Dim.0 will screw up the program"
    error = Dim.0 < 0.0;

    float Dim.E = 0.0 units = "Activation energy for V- diffusivity - eV";

    #doubly positive vacancy numbers
    float Dimm.0 = 0.0 units = "Pre-exponential constant for V-- cm2/sec"
    message = "Positive values for Dimm.0 will screw up the program"
    error = Dimm.0 < 0.0;

    float Dimm.E = 0.0 units = "Activation energy for V-- diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 43
#this card allows definitions of the zinc constants
#when these change - make sure diffuse_init code changes as well as command
card zinc;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly negative vacancy numbers
    float Dip.0 = 0.0 units = "Pre-exponential constant for V+ cm2/sec"
    message = "Negative values for Dip.0 will screw up the program"
    error = Dip.0 < 0.0;

    float Dip.E = 0.0 units = "Activation energy for V+ diffusivity - eV";

    #doubly negative vacancy numbers
    float Dipp.0 = 0.0 units = "Pre-exponential constant for V++ cm2/sec"
    message = "Negative values for Dipp.0 will screw up the program"
    error = Dipp.0 < 0.0;

    float Dipp.E = 0.0 units = "Activation energy for V++ diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}


#card 44
#this card allows definitions of the generic impurity constants
#when these change - make sure diffuse_init code changes as well as command
card generic;
{
    # select type.
    switch model = 1
    units="active dopant type"
    message = "only one of donor or acceptor may be specified";
    {
	boolean donor;
	boolean acceptor;
    }

    # selects implanted vs. grown-in diffusion coefficients
    boolean implanted;
    boolean grown.in;

    #neutral vacancies numbers
    float Dix.0 = 0.0 units = "Pre-exponential constant for Vo cm2/sec"
    message = "Negative values for Dix.0 will screw up the program"
    error = Dix.0 < 0.0;

    float Dix.E = 0.0 units = "Activation energy for Vo diffusivity - eV";

    #singly negative vacancy numbers
    float Dip.0 = 0.0 units = "Pre-exponential constant for V+ cm2/sec"
    message = "Negative values for Dip.0 will screw up the program"
    error = Dip.0 < 0.0;

    float Dip.E = 0.0 units = "Activation energy for V+ diffusivity - eV";

    #doubly negative vacancy numbers
    float Dipp.0 = 0.0 units = "Pre-exponential constant for V++ cm2/sec"
    message = "Negative values for Dipp.0 will screw up the program"
    error = Dipp.0 < 0.0;

    float Dipp.E = 0.0 units = "Activation energy for V++ diffusivity - eV";

    #treble negative vacancy numbers
    float Dippp.0 = 0.0 units = "Pre-exponential constant for V+++ cm2/sec"
    message = "Negative values for Dippp.0 will screw up the program"
    error = Dippp.0 < 0.0;

    float Dippp.E = 0.0 units = "Activation energy for V+++ diffusivity - eV";

    #singly positive vacancy numbers
    float Dim.0 = 0.0 units = "Pre-exponential constant for V- cm2/sec"
    message = "Positive values for Dim.0 will screw up the program"
    error = Dim.0 < 0.0;

    float Dim.E = 0.0 units = "Activation energy for V- diffusivity - eV";

    #doubly positive vacancy numbers
    float Dimm.0 = 0.0 units = "Pre-exponential constant for V-- cm2/sec"
    message = "Positive values for Dimm.0 will screw up the program"
    error = Dimm.0 < 0.0;

    float Dimm.E = 0.0 units = "Activation energy for V-- diffusivity - eV";

    #treble positive vacancy numbers
    float Dimmm.0 = 0.0 units = "Pre-exponential constant for V--- cm2/sec"
    message = "Positive values for Dimmm.0 will screw up the program"
    error = Dimmm.0 < 0.0;

    float Dimmm.E = 0.0 units = "Activation energy for V--- diffusivity - eV";

    float Fi = 0.0 units = "Fractional Interstitialcy"
    message = "Fi must be between 0 and 1"
    error = (Fi < 0) || (Fi > 1);

    #material type
    switch material = 1
    message = "only one material may be specified";
    {
	boolean silicon;
	boolean oxide;
	boolean oxynitride;
	boolean nitride;
	boolean poly;
	boolean gas;
	boolean gaas;
    }

    #second material switch for segregation coefficients
    switch mater = 2
    message = "only one material may be specified";
    {
	boolean /silicon;
	boolean /oxide;
	boolean /oxynitride;
	boolean /nitride;
	boolean /poly;
	boolean /gas;
	boolean /gaas;
    }

    #equilibrium segregation coefficients
    float Seg.0 = 1.0 units = "Pre-exponential constant for Segregation"
    message = "Seg.0 must be greater than 0.0"
    error = Seg.0 <= 0.0;
    
    float Seg.E = 0.0 units = "Activation energy for Segregation";

    #transport coefficients
    float Trn.0 = 1.0 units = "Pre-exponential constant for transport cm/s"
    message = "Trn.0 must be greater than or equal to 0.0"
    error = Trn.0 < 0.0;
    
    float Trn.E = 0.0 units = "Activation energy for transport";

    #solid solubility constants
    boolean ss.clear=false units="reset the value list";
    float ss.temp units="temperature half of solid solubility pair";
    float ss.conc units="concentration half of solid solubility pair";
}

#card 45
#this card allows definitions for parameters associated with loop growth
card dislocation;
{
    float rinit = 0.0
        units = "initial radius of dislocation loops (cm)"
        message = "radius must be positive"
        error = (rinit < 0.0);


    float ro = 3.14e-8
        units = "core radius of dislocation (cm)"
        message = "core radius must be positive"
        error = (ro < 0.0);

    float looploc = 0.0
        units = "center of dislocation loops (cm)";

    float rho = 0.0
        units = "density of dislocation loops (atoms/cm^2)"
        message = "density must be positive"
        error = (rho < 0.0);

    float burger = 3.14e-8
        units = "magnitude of Burger's vector of dislocation loop (cm)"
        message = "magnitude must be positive"
        error = (burger < 0.0);

    float fdrdt = 0.0
        units = "fitting constant used in calculating dr/dt (unitless)";

    float loopgdt = 0.001
        units = "parameter used in calculating maximum time step (unitless)";

    float lfactor = 0.0
        units = "dl/dt = lfactor * dr/dt (unitless), rho = 1/(2l^2)";

    float maxsi = 5.0e22
        units = "maximum ration of CI*'/CI* (unitless)"
        error = (maxsi < 0.0);

    float gamma = 4.375e13
        units = "Internal energy of stacking fault (eV/cm^-2)"
        error = (gamma < 0.0);

    float omega = 2.0e-23
        units = "Volume per silicon atom (cm^3)"
        error = (omega < 0.0);

    float mu = 4.975e23
        units = "Shear modulus of silicon (eV/cm)"
        error = (mu < 0.0);

    float nu = 0.27864583333
        units = "Poisson's ratio for silicon (unitless)"
        error = (nu < 0.0);
}


end
